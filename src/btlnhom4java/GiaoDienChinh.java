/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package btlnhom4java;

import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author ADMIN
 */
public class GiaoDienChinh extends javax.swing.JFrame {

    /**
     * Creates new form GiaoDienChinh
     */
    DefaultTableModel dtm;
    DefaultTableModel dtmdg;
    DefaultTableModel dtmmts;

    public GiaoDienChinh() {
        initComponents();
        setVisible(true);
        setLocation(200, 100);
        setTitle("CHƯƠNG TRÌNH QUẢN LÝ SÁCH TRONG THƯ VIỆN TRƯỜNG ĐẠI HỌC CÔNG NGHIỆP HÀ NỘI");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        txtngaysinh.setToolTipText("yyyy-MM-dd");
        txtidsach.requestFocus();
        dtm = (DefaultTableModel) tbsach.getModel();
        dtmdg = (DefaultTableModel) tbdocgia.getModel();
        dtmmts = (DefaultTableModel) tbmuontra.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        buttonGroupQLSach = new javax.swing.ButtonGroup();
        buttonGroupQLDocGia = new javax.swing.ButtonGroup();
        buttonGroupQLMuonTraSach = new javax.swing.ButtonGroup();
        buttonGroupQLThe = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtidsach = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txttensach = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txttacgia = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtsoluong = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txttheloai = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtgiasach = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtnxb = new javax.swing.JTextField();
        btntimkiemsach = new javax.swing.JButton();
        rbtensach = new javax.swing.JRadioButton();
        rbtacgia = new javax.swing.JRadioButton();
        rbtheloai = new javax.swing.JRadioButton();
        btnthemsach = new javax.swing.JButton();
        btnxoasach = new javax.swing.JButton();
        btnsuasach = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbsach = new javax.swing.JTable();
        btnhuysach = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        txtvitri = new javax.swing.JTextField();
        rbgia = new javax.swing.JRadioButton();
        btnhienthibangsach = new javax.swing.JButton();
        rbidsach = new javax.swing.JRadioButton();
        rbvitri = new javax.swing.JRadioButton();
        btnthoatsach = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtiddocgia = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txthoten = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtngaysinh = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtdiachi = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtnghenghiep = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtsdt = new javax.swing.JTextField();
        btntimkiemdocgia = new javax.swing.JButton();
        rbhoten = new javax.swing.JRadioButton();
        rbiddocgia = new javax.swing.JRadioButton();
        rbsdt = new javax.swing.JRadioButton();
        btnthemdocgia = new javax.swing.JButton();
        btnsuadocgia = new javax.swing.JButton();
        btnxoadocgia = new javax.swing.JButton();
        btnhuydocgia = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbdocgia = new javax.swing.JTable();
        btnthoatdocgia = new javax.swing.JButton();
        btnhienthidocgia = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        txtidthe = new javax.swing.JTextField();
        txthotenthe = new javax.swing.JTextField();
        btnthemthe = new javax.swing.JButton();
        btnsuathe = new javax.swing.JButton();
        btnxoathe = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbthe = new javax.swing.JTable();
        btntimkiemthe = new javax.swing.JButton();
        btnhuythe = new javax.swing.JButton();
        btnthoatthe = new javax.swing.JButton();
        rbidthe = new javax.swing.JRadioButton();
        rbhotenthe = new javax.swing.JRadioButton();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        btnhienthithe = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        txtiddocgiaqlmuontra = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txthotenqlmuontra = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtidsachqlmuontra = new javax.swing.JTextField();
        btnthemqlmuontra = new javax.swing.JButton();
        btnsuaqlmuontra = new javax.swing.JButton();
        btnxoaqlmuontra = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txttensachqlmuontra = new javax.swing.JTextField();
        txtngaymuon = new javax.swing.JTextField();
        txtngayhentra = new javax.swing.JTextField();
        txtngaythuctra = new javax.swing.JTextField();
        btntimkiemqlmuontra = new javax.swing.JButton();
        rbiddocgiaqlmuontra = new javax.swing.JRadioButton();
        rbidsachqlmuontra = new javax.swing.JRadioButton();
        btnhuyqlmuontra = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbmuontra = new javax.swing.JTable();
        btnthoatqlmuontra = new javax.swing.JButton();
        btnhienthiqlmuontra = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButton17 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel25 = new javax.swing.JLabel();
        jTextField29 = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setText("ID sách");

        jLabel4.setText("Tên sách");

        jLabel5.setText("Tác giả");

        jLabel1.setText("Số lượng");

        jLabel2.setText("Thể loại");

        jLabel6.setText("Giá sách");

        jLabel7.setText("Nhà xuất bản");

        btntimkiemsach.setText("Tìm kiếm");
        btntimkiemsach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btntimkiemsachActionPerformed(evt);
            }
        });

        buttonGroupQLSach.add(rbtensach);
        rbtensach.setText("Theo tên sách");

        buttonGroupQLSach.add(rbtacgia);
        rbtacgia.setText("Theo tác giả");

        buttonGroupQLSach.add(rbtheloai);
        rbtheloai.setText("Theo thể loại");

        btnthemsach.setText("Thêm");
        btnthemsach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnthemsachActionPerformed(evt);
            }
        });

        btnxoasach.setText("Xóa");
        btnxoasach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnxoasachActionPerformed(evt);
            }
        });

        btnsuasach.setText("Sửa");
        btnsuasach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsuasachActionPerformed(evt);
            }
        });

        tbsach.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID sách", "Tên sách", "Tác giả", "Số lượng", "Thể loại", "Giá sách", "NXB", "Vị trí"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbsach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbsachMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbsach);

        btnhuysach.setText("Hủy");
        btnhuysach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhuysachActionPerformed(evt);
            }
        });

        jLabel14.setText("Vị trí");

        buttonGroupQLSach.add(rbgia);
        rbgia.setText("Theo giá");

        btnhienthibangsach.setText("Hiển thị All");
        btnhienthibangsach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhienthibangsachActionPerformed(evt);
            }
        });

        buttonGroupQLSach.add(rbidsach);
        rbidsach.setText("ID sách");

        buttonGroupQLSach.add(rbvitri);
        rbvitri.setText("Theo vị trí");

        btnthoatsach.setText("Thoát");
        btnthoatsach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnthoatsachActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(32, 32, 32)
                                        .addComponent(txtidsach, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel1))
                                        .addGap(26, 26, 26)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txttacgia)
                                            .addComponent(txttensach, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtsoluong, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnhienthibangsach)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnthemsach)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnxoasach)
                                .addGap(18, 18, 18)
                                .addComponent(btnsuasach)
                                .addGap(19, 19, 19)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(btntimkiemsach)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnthoatsach))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel14)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtvitri, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtnxb, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtgiasach, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(68, 68, 68)
                                    .addComponent(txttheloai, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(rbidsach)
                                .addGap(10, 10, 10)
                                .addComponent(rbtensach)
                                .addGap(18, 18, 18)
                                .addComponent(rbtacgia)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnhuysach)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(rbtheloai)
                                        .addGap(18, 18, 18)
                                        .addComponent(rbgia)))))
                        .addGap(18, 18, 18)
                        .addComponent(rbvitri)
                        .addGap(28, 28, 28))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtidsach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txttheloai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txttensach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtgiasach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txttacgia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtnxb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtsoluong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(txtvitri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnhienthibangsach)
                    .addComponent(btnthemsach)
                    .addComponent(btnxoasach)
                    .addComponent(btnsuasach)
                    .addComponent(btntimkiemsach)
                    .addComponent(btnhuysach)
                    .addComponent(btnthoatsach))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtensach)
                    .addComponent(rbtacgia)
                    .addComponent(rbtheloai)
                    .addComponent(rbgia)
                    .addComponent(rbidsach)
                    .addComponent(rbvitri))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Quản lý sách", jPanel1);

        jLabel8.setText("ID độc giả");

        jLabel9.setText("Họ tên");

        jLabel10.setText("Ngày sinh");

        jLabel11.setText("Địa chỉ");

        jLabel12.setText("Nghề nghiệp");

        jLabel13.setText("Số điện thoại");

        btntimkiemdocgia.setText("Tìm kiếm");
        btntimkiemdocgia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btntimkiemdocgiaActionPerformed(evt);
            }
        });

        buttonGroupQLDocGia.add(rbhoten);
        rbhoten.setText("Theo họ tên");

        buttonGroupQLDocGia.add(rbiddocgia);
        rbiddocgia.setText("Theo ID");

        buttonGroupQLDocGia.add(rbsdt);
        rbsdt.setText("Theo SĐT");

        btnthemdocgia.setText("Thêm");
        btnthemdocgia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnthemdocgiaActionPerformed(evt);
            }
        });

        btnsuadocgia.setText("Sửa");
        btnsuadocgia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsuadocgiaActionPerformed(evt);
            }
        });

        btnxoadocgia.setText("Xóa");
        btnxoadocgia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnxoadocgiaActionPerformed(evt);
            }
        });

        btnhuydocgia.setText("Hủy");
        btnhuydocgia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhuydocgiaActionPerformed(evt);
            }
        });

        tbdocgia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID độc giả", "Họ tên", "Ngày sinh", "Địa chỉ", "Nghề nghiệp", "Số điện thoại"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbdocgia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbdocgiaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbdocgia);

        btnthoatdocgia.setText("Thoát");
        btnthoatdocgia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnthoatdocgiaActionPerformed(evt);
            }
        });

        btnhienthidocgia.setText("Hiển thị All");
        btnhienthidocgia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhienthidocgiaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10))
                                .addGap(33, 33, 33)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtiddocgia, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                                    .addComponent(txthoten)
                                    .addComponent(txtngaysinh))
                                .addGap(66, 66, 66))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(btnhienthidocgia)
                                .addGap(18, 18, 18)
                                .addComponent(btnthemdocgia)
                                .addGap(18, 18, 18)
                                .addComponent(btnsuadocgia)
                                .addGap(18, 18, 18)
                                .addComponent(btnxoadocgia)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btntimkiemdocgia)
                                .addGap(18, 18, 18)
                                .addComponent(rbiddocgia)
                                .addGap(18, 18, 18)
                                .addComponent(rbhoten)
                                .addGap(18, 18, 18)
                                .addComponent(rbsdt)
                                .addGap(18, 18, 18)
                                .addComponent(btnhuydocgia)
                                .addGap(18, 18, 18)
                                .addComponent(btnthoatdocgia))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(38, 38, 38)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtnghenghiep, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                                    .addComponent(txtsdt)
                                    .addComponent(txtdiachi))))
                        .addContainerGap(34, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtiddocgia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(txtdiachi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txthoten, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(txtnghenghiep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtngaysinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(txtsdt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbhoten)
                    .addComponent(rbsdt)
                    .addComponent(btnthemdocgia)
                    .addComponent(btnsuadocgia)
                    .addComponent(btnxoadocgia)
                    .addComponent(btnhuydocgia)
                    .addComponent(btntimkiemdocgia)
                    .addComponent(btnthoatdocgia)
                    .addComponent(rbiddocgia)
                    .addComponent(btnhienthidocgia))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Quản lý độc giả", jPanel2);

        jLabel23.setText("ID thẻ");

        jLabel24.setText("Họ tên");

        btnthemthe.setText("Thêm");

        btnsuathe.setText("Sửa");

        btnxoathe.setText("Xóa");

        tbthe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID thẻ", "Họ tên", "Ngày cấp", "Hết hạn"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tbthe);

        btntimkiemthe.setText("Tìm kiếm");

        btnhuythe.setText("Hủy");

        btnthoatthe.setText("Thoát");

        buttonGroupQLThe.add(rbidthe);
        rbidthe.setText("Theo ID");

        buttonGroupQLThe.add(rbhotenthe);
        rbhotenthe.setText("Theo họ tên");

        jLabel27.setText("Ngày cấp");

        jLabel28.setText("Hết hạn");

        btnhienthithe.setText("Hiển thị All");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 907, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(btnhienthithe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(btnthemthe)
                        .addGap(18, 18, 18)
                        .addComponent(btnsuathe)
                        .addGap(18, 18, 18)
                        .addComponent(btnxoathe)
                        .addGap(12, 12, 12))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23)
                            .addComponent(jLabel24))
                        .addGap(52, 52, 52)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtidthe)
                            .addComponent(txthotenthe, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))))
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel27)
                            .addComponent(jLabel28))
                        .addGap(56, 56, 56)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                            .addComponent(jTextField1)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btntimkiemthe)
                        .addGap(18, 18, 18)
                        .addComponent(rbidthe)
                        .addGap(18, 18, 18)
                        .addComponent(rbhotenthe)
                        .addGap(18, 18, 18)
                        .addComponent(btnhuythe)
                        .addGap(18, 18, 18)
                        .addComponent(btnthoatthe)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(txtidthe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(txthotenthe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnthemthe)
                    .addComponent(btnsuathe)
                    .addComponent(btnxoathe)
                    .addComponent(btnhuythe)
                    .addComponent(btntimkiemthe)
                    .addComponent(btnthoatthe)
                    .addComponent(rbidthe)
                    .addComponent(rbhotenthe)
                    .addComponent(btnhienthithe))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Quản lý thẻ thư viện", jPanel3);

        jLabel16.setText("ID độc giả");

        jLabel17.setText("Họ tên");

        jLabel18.setText("ID sách");

        btnthemqlmuontra.setText("Thêm");
        btnthemqlmuontra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnthemqlmuontraActionPerformed(evt);
            }
        });

        btnsuaqlmuontra.setText("Sửa");
        btnsuaqlmuontra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsuaqlmuontraActionPerformed(evt);
            }
        });

        btnxoaqlmuontra.setText("Xóa");
        btnxoaqlmuontra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnxoaqlmuontraActionPerformed(evt);
            }
        });

        jLabel19.setText("Tên sách");

        jLabel20.setText("Ngày mượn");

        jLabel21.setText("Ngày hẹn trả");

        jLabel22.setText("Ngày thực trả");

        btntimkiemqlmuontra.setText("Tìm kiếm");
        btntimkiemqlmuontra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btntimkiemqlmuontraActionPerformed(evt);
            }
        });

        buttonGroupQLMuonTraSach.add(rbiddocgiaqlmuontra);
        rbiddocgiaqlmuontra.setText("Theo ID độc giả");

        buttonGroupQLMuonTraSach.add(rbidsachqlmuontra);
        rbidsachqlmuontra.setText("Theo ID sách");

        btnhuyqlmuontra.setText("Hủy");
        btnhuyqlmuontra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhuyqlmuontraActionPerformed(evt);
            }
        });

        tbmuontra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID độc giả", "Họ tên", "ID sách", "Tên sách", "Ngày mượn", "Ngày hẹn trả", "Ngày thực trả"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbmuontra.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbmuontraMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tbmuontra);

        btnthoatqlmuontra.setText("Thoát");
        btnthoatqlmuontra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnthoatqlmuontraActionPerformed(evt);
            }
        });

        btnhienthiqlmuontra.setText("Hiển thị All");
        btnhienthiqlmuontra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhienthiqlmuontraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(btnhienthiqlmuontra)
                            .addComponent(jLabel19))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtiddocgiaqlmuontra)
                            .addComponent(txthotenqlmuontra)
                            .addComponent(txtidsachqlmuontra)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(btnthemqlmuontra)
                                .addGap(27, 27, 27)
                                .addComponent(btnsuaqlmuontra)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                .addComponent(btnxoaqlmuontra))
                            .addComponent(txttensachqlmuontra))
                        .addGap(72, 72, 72)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20)
                                    .addComponent(jLabel21)
                                    .addComponent(jLabel22)
                                    .addComponent(btntimkiemqlmuontra))
                                .addGap(40, 40, 40)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtngaymuon, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                                    .addComponent(txtngayhentra)
                                    .addComponent(txtngaythuctra)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(rbiddocgiaqlmuontra)
                                .addGap(18, 18, 18)
                                .addComponent(rbidsachqlmuontra)
                                .addGap(45, 45, 45)
                                .addComponent(btnhuyqlmuontra)
                                .addGap(18, 18, 18)
                                .addComponent(btnthoatqlmuontra)))
                        .addContainerGap(114, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtiddocgiaqlmuontra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(txtngaymuon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(txthotenqlmuontra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(txtngayhentra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(txtidsachqlmuontra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(txtngaythuctra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(txttensachqlmuontra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnthemqlmuontra)
                    .addComponent(btnsuaqlmuontra)
                    .addComponent(btnxoaqlmuontra)
                    .addComponent(btntimkiemqlmuontra)
                    .addComponent(btnhienthiqlmuontra))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbiddocgiaqlmuontra)
                    .addComponent(rbidsachqlmuontra)
                    .addComponent(btnhuyqlmuontra)
                    .addComponent(btnthoatqlmuontra))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Quản lý mượn trả sách", jPanel5);

        jButton17.setText("Cập nhật");

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID sách", "Tên sách", "Tác giả", "Số lượng", "Giá sách", "Thể loại", "NXB", "Số lượng mượn"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable4);

        jLabel25.setText("Số lượng sách còn trong thư viện:  ");

        jTextField29.setText("100");

        jLabel26.setText("Bảng thống kê sách mượn nhiều:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addGap(191, 191, 191)
                        .addComponent(jLabel25)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField29, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(291, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton17)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jTextField29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Thống kê sách", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//========================================QUẢN LÝ SÁCH==================================================

    private void btnhienthibangsachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhienthibangsachActionPerformed
        Connection conn = null;
        Statement stmt = null;
        try {
            Class.forName(JDBC_DRIVER);
            System.out.println("Dang ket noi toi co so du lieu...!");
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            System.out.println("Tao cau lenh truy van SQL...!");
            stmt = conn.createStatement();
            String sql = "select * from Sach";
            ResultSet rs = stmt.executeQuery(sql);
            int soHang = dtm.getRowCount() - 1;
            for (int i = soHang; i >= 0; i--) {
                dtm.removeRow(i);
            }
            while (rs.next()) {
                String[] columns = new String[8];
                columns[0] = rs.getString(1);
                columns[1] = rs.getString(2);
                columns[2] = rs.getString(3);
                columns[3] = rs.getString(4);
                columns[4] = rs.getString(5);
                columns[5] = rs.getString(6);
                columns[6] = rs.getString(7);
                columns[7] = rs.getString(8);
                dtm.addRow(columns);
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se1) {
                se1.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se2) {
                se2.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnhienthibangsachActionPerformed

    private void btnxoasachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnxoasachActionPerformed
        Connection conn = null;
        Statement stmt = null;
        try {
            Class.forName(JDBC_DRIVER);
            System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            System.out.println("Create SQL query...");
            stmt = conn.createStatement();
            String sqlDeleteTheoID = "Delete From Sach Where IDSach = '" + txtidsach.getText() + "';";
            int numberRowsAffected = stmt.executeUpdate(sqlDeleteTheoID);
            if (numberRowsAffected != 0) {
                System.out.println("Delete sucessfully...");
            } else {
                System.out.println("Delete failed...");
            }
            int soHang = dtm.getRowCount() - 1;
            for (int i = soHang; i >= 0; i--) {
                if (txtidsach.getText().equals(String.valueOf(dtm.getValueAt(i, 0)))) {
                    dtm.removeRow(i);
                }
            }
            stmt.close();
            conn.close();
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se1) {
                se1.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se2) {
                se2.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnxoasachActionPerformed

    private void btnthemsachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnthemsachActionPerformed
        Connection conn = null;
        Statement stmt = null;
        try {
            Class.forName(JDBC_DRIVER);
            System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            System.out.println("Create SQL query...");
            stmt = conn.createStatement();
            String sqlSelectTheoIDSach = "Select * From Sach Where idSach='" + txtidsach.getText() + "'";
            ResultSet rs0 = stmt.executeQuery(sqlSelectTheoIDSach);
            while (rs0.next()) {
                JOptionPane.showMessageDialog(rootPane, "Trùng ID sách, vui lòng nhập lại!");
                return;
            }
            if (txtidsach.getText().equals("") || txttensach.getText().equals("") || txttacgia.getText().equals("") || txtsoluong.getText().equals("")
                    || txttheloai.getText().equals("") || txtgiasach.getText().equals("") || txtnxb.getText().equals("") || txtvitri.getText().equals("")) {

                JOptionPane.showMessageDialog(rootPane, "Không được để trống các trường!");
            } else {
                String sqlThemSach = "Insert Into Sach Value ('" + txtidsach.getText() + "', '" + txttensach.getText() + "', '" + txttacgia.getText() + "', '" + txtsoluong.getText() + "', '" + txttheloai.getText() + "', '" + txtgiasach.getText() + "', '" + txtnxb.getText() + "', '" + txtvitri.getText() + "');";
                int numberRowsAffected = stmt.executeUpdate(sqlThemSach);
                if (numberRowsAffected != 0) {
                    System.out.println("Inserted successfully!");
                } else {
                    System.out.println("Insertion failed!");
                }
            }
            int soHang = dtm.getRowCount() - 1;
            for (int i = soHang; i >= 0; i--) {
                dtm.removeRow(i);
            }
            String sqlSelectAll = "select * from Sach";
            ResultSet rs = stmt.executeQuery(sqlSelectAll);
            while (rs.next()) {
                String[] columns = new String[8];
                columns[0] = rs.getString(1);
                columns[1] = rs.getString(2);
                columns[2] = rs.getString(3);
                columns[3] = rs.getString(4);
                columns[4] = rs.getString(5);
                columns[5] = rs.getString(6);
                columns[6] = rs.getString(7);
                columns[7] = rs.getString(8);
                dtm.addRow(columns);
            }
            stmt.close();
            conn.close();
            rs.close();
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se1) {
                se1.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se2) {
                se2.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnthemsachActionPerformed

    private void btntimkiemsachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btntimkiemsachActionPerformed
        Connection conn = null;
        Statement stmt = null;
        try {
            Class.forName(JDBC_DRIVER);
            System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            System.out.println("Create SQL query...");
            stmt = conn.createStatement();
            int soHang = dtm.getRowCount() - 1;
            for (int i = soHang; i >= 0; i--) {
                dtm.removeRow(i);
            }
            if (rbidsach.isSelected() == false && rbtensach.isSelected() == false && rbtacgia.isSelected() == false && rbgia.isSelected() == false && rbtheloai.isSelected() == false && rbvitri.isSelected() == false) {
                JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn vào 1 RadioButton để tìm kiếm!");
            } else {
                if (rbidsach.isSelected()) {
                    String sql = "Select * From Sach Where idSach='" + txtidsach.getText() + "'";
                    ResultSet rs = stmt.executeQuery(sql);
                    while (rs.next()) {
                        String[] columns = new String[8];
                        columns[0] = rs.getString(1);
                        columns[1] = rs.getString(2);
                        columns[2] = rs.getString(3);
                        columns[3] = rs.getString(4);
                        columns[4] = rs.getString(5);
                        columns[5] = rs.getString(6);
                        columns[6] = rs.getString(7);
                        columns[7] = rs.getString(8);
                        dtm.addRow(columns);
                    }
                    if (dtm.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(rootPane, "Sorry! Không có loại sách mà bạn muốn tìm!");
                    }
                    rs.close();
                } else if (rbtensach.isSelected()) {
                    String sql1 = "Select * From Sach Where tenSach='" + txttensach.getText() + "'";
                    ResultSet rs = stmt.executeQuery(sql1);
                    while (rs.next()) {
                        String[] columns = new String[8];
                        columns[0] = rs.getString(1);
                        columns[1] = rs.getString(2);
                        columns[2] = rs.getString(3);
                        columns[3] = rs.getString(4);
                        columns[4] = rs.getString(5);
                        columns[5] = rs.getString(6);
                        columns[6] = rs.getString(7);
                        columns[7] = rs.getString(8);
                        dtm.addRow(columns);
                    }
                    if (dtm.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(rootPane, "Sorry! Không có loại sách mà bạn muốn tìm!");
                    }
                    rs.close();
                } else if (rbtacgia.isSelected()) {
                    String sql2 = "Select * From Sach Where tacGia='" + txttacgia.getText() + "'";
                    ResultSet rs = stmt.executeQuery(sql2);
                    while (rs.next()) {
                        String[] columns = new String[8];
                        columns[0] = rs.getString(1);
                        columns[1] = rs.getString(2);
                        columns[2] = rs.getString(3);
                        columns[3] = rs.getString(4);
                        columns[4] = rs.getString(5);
                        columns[5] = rs.getString(6);
                        columns[6] = rs.getString(7);
                        columns[7] = rs.getString(8);
                        dtm.addRow(columns);
                    }
                    if (dtm.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(rootPane, "Sorry! Không có loại sách mà bạn muốn tìm!");
                    }
                    rs.close();
                } else if (rbtheloai.isSelected()) {
                    String sql3 = "Select * From Sach Where theLoai='" + txttheloai.getText() + "'";
                    ResultSet rs = stmt.executeQuery(sql3);
                    while (rs.next()) {
                        String[] columns = new String[8];
                        columns[0] = rs.getString(1);
                        columns[1] = rs.getString(2);
                        columns[2] = rs.getString(3);
                        columns[3] = rs.getString(4);
                        columns[4] = rs.getString(5);
                        columns[5] = rs.getString(6);
                        columns[6] = rs.getString(7);
                        columns[7] = rs.getString(8);
                        dtm.addRow(columns);
                    }
                    if (dtm.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(rootPane, "Sorry! Không có loại sách mà bạn muốn tìm!");
                    }
                    rs.close();
                } else if (rbgia.isSelected()) {
                    String sql4 = "Select * From Sach Where giaSach='" + txtgiasach.getText() + "'";
                    ResultSet rs = stmt.executeQuery(sql4);
                    while (rs.next()) {
                        String[] columns = new String[8];
                        columns[0] = rs.getString(1);
                        columns[1] = rs.getString(2);
                        columns[2] = rs.getString(3);
                        columns[3] = rs.getString(4);
                        columns[4] = rs.getString(5);
                        columns[5] = rs.getString(6);
                        columns[6] = rs.getString(7);
                        columns[7] = rs.getString(8);
                        dtm.addRow(columns);
                    }
                    if (dtm.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(rootPane, "Sorry! Không có loại sách mà bạn muốn tìm!");
                    }
                    rs.close();
                } else if (rbvitri.isSelected()) {
                    String sql5 = "Select * From Sach Where viTri='" + txtvitri.getText() + "'";
                    ResultSet rs = stmt.executeQuery(sql5);
                    while (rs.next()) {
                        String[] columns = new String[8];
                        columns[0] = rs.getString(1);
                        columns[1] = rs.getString(2);
                        columns[2] = rs.getString(3);
                        columns[3] = rs.getString(4);
                        columns[4] = rs.getString(5);
                        columns[5] = rs.getString(6);
                        columns[6] = rs.getString(7);
                        columns[7] = rs.getString(8);
                        dtm.addRow(columns);
                    }
                    if (dtm.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(rootPane, "Sorry! Không có loại sách mà bạn muốn tìm!");
                    }
                    rs.close();
                }
            }
//            int soHang = dtm.getRowCount() - 1;
//            for (int i = soHang; i >= 0; i--) {
//                if (!txtidsach.getText().equals(String.valueOf(dtm.getValueAt(i, 0))) && rbidsach.isSelected() == true) {
//                    dtm.removeRow(i);
//                } else if (!txttensach.getText().equals(String.valueOf(dtm.getValueAt(i, 1))) && rbtensach.isSelected() == true) {
//                    dtm.removeRow(i);
//                } else if (!txttacgia.getText().equals(String.valueOf(dtm.getValueAt(i, 2))) && rbtacgia.isSelected() == true) {
//                    dtm.removeRow(i);
//                } else if (!txttheloai.getText().equals(String.valueOf(dtm.getValueAt(i, 4))) && rbtheloai.isSelected() == true) {
//                    dtm.removeRow(i);
//                } else if (!txtgiasach.getText().equals(String.valueOf(dtm.getValueAt(i, 5))) && rbgia.isSelected() == true) {
//                    dtm.removeRow(i);
//                } else if (!txtvitri.getText().equals(String.valueOf(dtm.getValueAt(i, 7))) && rbvitri.isSelected() == true) {
//                    dtm.removeRow(i);
//                }
//                if (dtm.getRowCount() == 0) {
//                    JOptionPane.showMessageDialog(rootPane, "Sorry! Không có loại sách mà bạn muốn tìm!");
//                }
//            }

            stmt.close();
            conn.close();
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se1) {
                se1.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se2) {
                se2.printStackTrace();
            }
        }
    }//GEN-LAST:event_btntimkiemsachActionPerformed

    private void btnsuasachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsuasachActionPerformed
        Connection conn = null;
        Statement stmt = null;
        try {
            Class.forName(JDBC_DRIVER);
            System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            System.out.println("Create SQL query...");
            stmt = conn.createStatement();
            String sqlUpdate = "Update Sach Set tenSach = '" + txttensach.getText() + "', tacGia = '" + txttacgia.getText() + "', soLuong = '" + Integer.parseInt(txtsoluong.getText()) + "', theLoai = '" + txttheloai.getText() + "', giaSach = '" + Integer.parseInt(txtgiasach.getText()) + "', viTri = '" + txtvitri.getText() + "' Where idSach='" + txtidsach.getText() + "'";
            stmt.executeUpdate(sqlUpdate);
            int soHang = dtm.getRowCount() - 1;
            for (int i = soHang; i >= 0; i--) {
                dtm.removeRow(i);
            }
            String sqlSelectAll = "select * from Sach";
            ResultSet rs = stmt.executeQuery(sqlSelectAll);
            while (rs.next()) {
                String[] columns = new String[8];
                columns[0] = rs.getString(1);
                columns[1] = rs.getString(2);
                columns[2] = rs.getString(3);
                columns[3] = rs.getString(4);
                columns[4] = rs.getString(5);
                columns[5] = rs.getString(6);
                columns[6] = rs.getString(7);
                columns[7] = rs.getString(8);
                dtm.addRow(columns);
            }
            conn.close();
            stmt.close();
            rs.close();
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se1) {
                se1.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se2) {
                se2.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnsuasachActionPerformed

    private void tbsachMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbsachMouseClicked
        int row = tbsach.getSelectedRow();
        String idSach = (String) tbsach.getValueAt(row, 0);
        String tenSach = (String) tbsach.getValueAt(row, 1);
        String tacGia = (String) tbsach.getValueAt(row, 2);
        String soLuong = (String) tbsach.getValueAt(row, 3);
        String theLoai = (String) tbsach.getValueAt(row, 4);
        String giaSach = (String) tbsach.getValueAt(row, 5);
        String nhaXuatBan = (String) tbsach.getValueAt(row, 6);
        String viTri = (String) tbsach.getValueAt(row, 7);
        txtidsach.setText(idSach);
        txttensach.setText(tenSach);
        txttacgia.setText(tacGia);
        txtsoluong.setText(soLuong);
        txttheloai.setText(theLoai);
        txtgiasach.setText(giaSach);
        txtnxb.setText(nhaXuatBan);
        txtvitri.setText(viTri);
    }//GEN-LAST:event_tbsachMouseClicked

    private void btnthoatsachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnthoatsachActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnthoatsachActionPerformed

    private void btnhuysachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhuysachActionPerformed
        txtidsach.setText("");
        txttensach.setText("");
        txttacgia.setText("");
        txtsoluong.setText("");
        txttheloai.setText("");
        txtgiasach.setText("");
        txtnxb.setText("");
        txtvitri.setText("");
    }//GEN-LAST:event_btnhuysachActionPerformed

//===========================================QUẢN LÝ ĐỘC GIẢ=================================================

    private void btnhienthidocgiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhienthidocgiaActionPerformed
        Connection conn = null;
        Statement stmt = null;
        try {
            Class.forName(JDBC_DRIVER);
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sqlHienThiAll = "select * from docgia";
            ResultSet rs = stmt.executeQuery(sqlHienThiAll);
            int soHang = dtmdg.getRowCount() - 1;
            for (int i = soHang; i >= 0; i--) {
                dtmdg.removeRow(i);
            }
            while (rs.next()) {
                String[] columns = new String[6];
                columns[0] = rs.getString(1);
                columns[1] = rs.getString(2);
                columns[2] = rs.getString(3);
                columns[3] = rs.getString(4);
                columns[4] = rs.getString(5);
                columns[5] = rs.getString(6);
                dtmdg.addRow(columns);
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se1) {
                se1.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se2) {
                se2.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnhienthidocgiaActionPerformed

    private void btnthemdocgiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnthemdocgiaActionPerformed
        Connection conn = null;
        Statement stmt = null;
        try {
            Class.forName(JDBC_DRIVER);
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sqlHienThiTheoIDDG = "select * from docgia where idDocGia='" + txtiddocgia.getText() + "'";
            ResultSet rs0 = stmt.executeQuery(sqlHienThiTheoIDDG);
            while (rs0.next()) {
                JOptionPane.showMessageDialog(null, "Trùng id độc giả, vui lòng nhập lại!");
                return;
            }
            if (txtiddocgia.getText().equals("") || txthoten.getText().equals("") || txtngaysinh.getText().equals("") || txtdiachi.getText().equals("") || txtnghenghiep.getText().equals("") || txtsdt.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Không được để trống các trường!");
            } else {
                String sqlThem = "insert into docgia Value('" + txtiddocgia.getText() + "', '" + txthoten.getText() + "', '" + txtngaysinh.getText() + "', '" + txtdiachi.getText() + "', '" + txtnghenghiep.getText() + "', '" + txtsdt.getText() + "');";
                stmt.executeUpdate(sqlThem);
                String sqlHienThiAll = "select * from docgia";
                ResultSet rs = stmt.executeQuery(sqlHienThiAll);
                int soHang = dtmdg.getRowCount() - 1;
                for (int i = soHang; i >= 0; i--) {
                    dtmdg.removeRow(i);
                }
                while (rs.next()) {
                    String[] columns = new String[6];
                    columns[0] = rs.getString(1);
                    columns[1] = rs.getString(2);
                    columns[2] = rs.getString(3);
                    columns[3] = rs.getString(4);
                    columns[4] = rs.getString(5);
                    columns[5] = rs.getString(6);
                    dtmdg.addRow(columns);
                }
                rs.close();
                stmt.close();
                conn.close();
            }
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se1) {
                se1.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se2) {
                se2.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnthemdocgiaActionPerformed

    private void tbdocgiaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbdocgiaMouseClicked
        int row = tbdocgia.getSelectedRow();

        String idDocGia = (String) dtmdg.getValueAt(row, 0);
        String hoTen = (String) dtmdg.getValueAt(row, 1);
        String ngaySinh = (String) dtmdg.getValueAt(row, 2);
        String diaChi = (String) dtmdg.getValueAt(row, 3);
        String ngheNghiep = (String) dtmdg.getValueAt(row, 4);
        String sdt = (String) dtmdg.getValueAt(row, 5);

        txtiddocgia.setText(idDocGia);
        txthoten.setText(hoTen);
        txtngaysinh.setText(ngaySinh);
        txtdiachi.setText(diaChi);
        txtnghenghiep.setText(ngheNghiep);
        txtsdt.setText(sdt);
    }//GEN-LAST:event_tbdocgiaMouseClicked

    private void btnsuadocgiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsuadocgiaActionPerformed
        Connection conn = null;
        Statement stmt = null;
        try {
            Class.forName(JDBC_DRIVER);
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sqlSua = "Update docgia Set hoTen='" + txthoten.getText() + "', ngaySinh='" + txtngaysinh.getText() + "', diaChi='" + txtdiachi.getText() + "', ngheNghiep='" + txtnghenghiep.getText() + "', soDienThoai='" + txtsdt.getText() + "' Where idDocGia='" + txtiddocgia.getText() + "'";
            stmt.executeUpdate(sqlSua);
            String sqlHienThiAll = "select * from docgia";
            ResultSet rs = stmt.executeQuery(sqlHienThiAll);
            int soHang = dtmdg.getRowCount() - 1;
            for (int i = soHang; i >= 0; i--) {
                dtmdg.removeRow(i);
            }
            while (rs.next()) {
                String[] columns = new String[6];
                columns[0] = rs.getString(1);
                columns[1] = rs.getString(2);
                columns[2] = rs.getString(3);
                columns[3] = rs.getString(4);
                columns[4] = rs.getString(5);
                columns[5] = rs.getString(6);
                dtmdg.addRow(columns);
            }
            rs.close();
            conn.close();
            stmt.close();
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se1) {
                se1.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se2) {
                se2.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnsuadocgiaActionPerformed

    private void btnxoadocgiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnxoadocgiaActionPerformed
        Connection conn = null;
        Statement stmt = null;
        try {
            Class.forName(JDBC_DRIVER);
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sqlXoa = "Delete From docgia Where idDocGia='" + txtiddocgia.getText() + "'";
            stmt.executeUpdate(sqlXoa);
            String sqlHienThiAll = "select * from docgia";
            ResultSet rs = stmt.executeQuery(sqlHienThiAll);
            int soHang = dtmdg.getRowCount() - 1;
            for (int i = soHang; i >= 0; i--) {
                dtmdg.removeRow(i);
            }
            while (rs.next()) {
                String[] columns = new String[6];
                columns[0] = rs.getString(1);
                columns[1] = rs.getString(2);
                columns[2] = rs.getString(3);
                columns[3] = rs.getString(4);
                columns[4] = rs.getString(5);
                columns[5] = rs.getString(6);
                dtmdg.addRow(columns);
            }
            rs.close();
            conn.close();
            stmt.close();
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se1) {
                se1.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se2) {
                se2.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnxoadocgiaActionPerformed

    private void btntimkiemdocgiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btntimkiemdocgiaActionPerformed
        Connection conn = null;
        Statement stmt = null;
        try {
            Class.forName(JDBC_DRIVER);
            System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            System.out.println("Create SQL query...");
            stmt = conn.createStatement();
            int soHang = dtmdg.getRowCount() - 1;
            for (int i = soHang; i >= 0; i--) {
                dtmdg.removeRow(i);
            }
            if (rbiddocgia.isSelected() == false && rbhoten.isSelected() == false && rbsdt.isSelected() == false) {
                JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn vào 1 RadioButton để tìm kiếm!");
            } else {
                if (rbiddocgia.isSelected()) {
                    String sql = "Select * From docgia Where idDocGia='" + txtiddocgia.getText() + "'";
                    ResultSet rs = stmt.executeQuery(sql);
                    while (rs.next()) {
                        String[] columns = new String[6];
                        columns[0] = rs.getString(1);
                        columns[1] = rs.getString(2);
                        columns[2] = rs.getString(3);
                        columns[3] = rs.getString(4);
                        columns[4] = rs.getString(5);
                        columns[5] = rs.getString(6);
                        dtmdg.addRow(columns);
                    }
                    if (dtmdg.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(rootPane, "Sorry! Không có độc giả mà bạn muốn tìm!");
                    }
                    rs.close();
                } else if (rbhoten.isSelected()) {
                    String sql1 = "Select * From docgia Where hoTen='" + txthoten.getText() + "'";
                    ResultSet rs = stmt.executeQuery(sql1);
                    while (rs.next()) {
                        String[] columns = new String[6];
                        columns[0] = rs.getString(1);
                        columns[1] = rs.getString(2);
                        columns[2] = rs.getString(3);
                        columns[3] = rs.getString(4);
                        columns[4] = rs.getString(5);
                        columns[5] = rs.getString(6);
                        dtmdg.addRow(columns);
                    }
                    if (dtmdg.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(rootPane, "Sorry! Không có loại sách mà bạn muốn tìm!");
                    }
                    rs.close();
                } else if (rbsdt.isSelected()) {
                    String sql2 = "Select * From docgia Where soDienThoai='" + txtsdt.getText() + "'";
                    ResultSet rs = stmt.executeQuery(sql2);
                    while (rs.next()) {
                        String[] columns = new String[6];
                        columns[0] = rs.getString(1);
                        columns[1] = rs.getString(2);
                        columns[2] = rs.getString(3);
                        columns[3] = rs.getString(4);
                        columns[4] = rs.getString(5);
                        columns[5] = rs.getString(6);
                        dtmdg.addRow(columns);
                    }
                    if (dtmdg.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(rootPane, "Sorry! Không có loại sách mà bạn muốn tìm!");
                    }
                    rs.close();
                }
            }
            stmt.close();
            conn.close();
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se1) {
                se1.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se2) {
                se2.printStackTrace();
            }
        }
    }//GEN-LAST:event_btntimkiemdocgiaActionPerformed

    private void btnhuydocgiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhuydocgiaActionPerformed
        txtiddocgia.setText("");
        txthoten.setText("");
        txtngaysinh.setText("");
        txtnghenghiep.setText("");
        txtsdt.setText("");
        txtdiachi.setText("");
    }//GEN-LAST:event_btnhuydocgiaActionPerformed

    private void btnthoatdocgiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnthoatdocgiaActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnthoatdocgiaActionPerformed

//=================================QUẢN LÝ MƯỢN TRẢ SÁCH=================================================

    private void btnhienthiqlmuontraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhienthiqlmuontraActionPerformed
        Connection conn = null;
        Statement stmt = null;

        try {
            Class.forName(JDBC_DRIVER);
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sqlHienThiAll = "Select * From muontrasach";
            ResultSet rs = stmt.executeQuery(sqlHienThiAll);
            int soHang = dtmmts.getRowCount() - 1;
            for (int i = soHang; i >= 0; i--) {
                dtmmts.removeRow(i);
            }
            while (rs.next()) {
                String[] columns = new String[7];
                columns[0] = rs.getString(1);
                columns[1] = rs.getString(2);
                columns[2] = rs.getString(3);
                columns[3] = rs.getString(4);
                columns[4] = rs.getString(5);
                columns[5] = rs.getString(6);
                columns[6] = rs.getString(7);
                dtmmts.addRow(columns);
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se1) {
                se1.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se2) {
                se2.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnhienthiqlmuontraActionPerformed

    private void btnthemqlmuontraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnthemqlmuontraActionPerformed
        Connection conn = null;
        Statement stmt = null;
        
        try {
            Class.forName(JDBC_DRIVER);
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            //Kiểm tra id sách phải nằm trong bảng sách:
            String sqlKTIDSach = "Select * From sach";
            ResultSet rs0 = stmt.executeQuery(sqlKTIDSach);
            int demKhacIDSach = 0;
            while(rs0.next()){
                if(!txtidsachqlmuontra.getText().equals(rs0.getString(1)))
                    demKhacIDSach++;
            }
            int soHangSach = dtm.getRowCount();
            if(demKhacIDSach == soHangSach){
                JOptionPane.showMessageDialog(rootPane, "Mã sách phải nằm trong bảng sách!");
                return;
            }
            //Kiểm tra id độc giả phải nằm trong bảng độc giả:
            String sqlKTIDDocGia = "Select * From docgia";
            ResultSet rs1 = stmt.executeQuery(sqlKTIDDocGia);
            int demKhacIDDocGia = 0;
            while(rs1.next()){
                if(!txtiddocgiaqlmuontra.getText().equals(rs1.getString(1)))
                    demKhacIDDocGia++;
            }
            int soHangDocGia = dtmdg.getRowCount();
            if(demKhacIDDocGia == soHangDocGia){
                JOptionPane.showMessageDialog(rootPane, "Mã độc giả phải nằm trong bảng độc giả!");
                return;
            }
            //Thêm:            
            String sqlThem = "Insert Into muontrasach Value('" + txtiddocgiaqlmuontra.getText() + "', '" + txthotenqlmuontra.getText() + "', '" + txtidsachqlmuontra.getText() + "', '" + txttensachqlmuontra.getText() + "', '" + txtngaymuon.getText() + "', '" + txtngayhentra.getText() + "', '" + txtngaythuctra.getText() + "');";           
            int numberRowsAffected = stmt.executeUpdate(sqlThem);
            if (numberRowsAffected == 0) {
                System.out.println("Insert failed...");
            } else {
                System.out.println("Insert successfully...");
            }
            int soHang = dtmmts.getRowCount() - 1;
            for (int i = soHang; i >= 0; i--) {
                dtmmts.removeRow(i);
            }
            String sqlHienThiAll = "Select * From muontrasach";
            ResultSet rs = stmt.executeQuery(sqlHienThiAll);
            while (rs.next()) {
                String[] columns = new String[7];
                columns[0] = rs.getString(1);
                columns[1] = rs.getString(2);
                columns[2] = rs.getString(3);
                columns[3] = rs.getString(4);
                columns[4] = rs.getString(5);
                columns[5] = rs.getString(6);
                columns[6] = rs.getString(7);
                dtmmts.addRow(columns);
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se1) {
                se1.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se2) {
                se2.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnthemqlmuontraActionPerformed

    private void btnsuaqlmuontraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsuaqlmuontraActionPerformed
        Connection conn = null;
        Statement stmt = null;

        try {
            Class.forName(JDBC_DRIVER);
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            stmt = conn.createStatement();
            String sqlSua = "Update muontrasach Set hoTen='" + txthotenqlmuontra.getText() + "', tenSach='" + txttensachqlmuontra.getText() + "', ngayMuon='" + txtngaymuon.getText() + "', ngayHenTra='" + txtngayhentra.getText() + "', ngayThucTra='" + txtngaythuctra.getText() + "' Where idDocGia='" + txtiddocgiaqlmuontra.getText() + "' And idSach='" + txtidsachqlmuontra.getText() + "'";
            stmt.executeUpdate(sqlSua);
            int soHang = dtmmts.getRowCount() - 1;
            for (int i = soHang; i >= 0; i--) {
                dtmmts.removeRow(i);
            }
            String sqlHienThiAll = "Select * From muontrasach";
            ResultSet rs = stmt.executeQuery(sqlHienThiAll);
            while (rs.next()) {
                String[] columns = new String[7];
                columns[0] = rs.getString(1);
                columns[1] = rs.getString(2);
                columns[2] = rs.getString(3);
                columns[3] = rs.getString(4);
                columns[4] = rs.getString(5);
                columns[5] = rs.getString(6);
                columns[6] = rs.getString(7);
                dtmmts.addRow(columns);
            }
            rs.close();
            stmt.close();
            conn.close();
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se1) {
                se1.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se2) {
                se2.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnsuaqlmuontraActionPerformed

    private void tbmuontraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbmuontraMouseClicked
        int row = tbmuontra.getSelectedRow();
        String idDocGia = (String) dtmmts.getValueAt(row, 0);
        String hoTen = (String) dtmmts.getValueAt(row, 1);
        String idSach = (String) dtmmts.getValueAt(row, 2);
        String tenSach = (String) dtmmts.getValueAt(row, 3);
        String ngayMuon = (String) dtmmts.getValueAt(row, 4);
        String ngayHenTra = (String) dtmmts.getValueAt(row, 5);
        String ngayThucTra = (String) dtmmts.getValueAt(row, 6);

        txtiddocgiaqlmuontra.setText(idDocGia);
        txthotenqlmuontra.setText(hoTen);
        txtidsachqlmuontra.setText(idSach);
        txttensachqlmuontra.setText(tenSach);
        txtngaymuon.setText(ngayMuon);
        txtngayhentra.setText(ngayHenTra);
        txtngaythuctra.setText(ngayThucTra);
    }//GEN-LAST:event_tbmuontraMouseClicked

    private void btnxoaqlmuontraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnxoaqlmuontraActionPerformed
        Connection conn = null;
        Statement stmt = null;

        if (rbiddocgiaqlmuontra.isSelected() == false && rbidsachqlmuontra.isSelected() == false) {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn vào RadioButton để xóa!");
        } else {
            try {
                Class.forName(JDBC_DRIVER);
                conn = DriverManager.getConnection(DB_URL, USER, PASS);
                stmt = conn.createStatement();
                String sqlXoaTheoIDDG = "Delete From muontrasach Where idDocGia='" + txtiddocgiaqlmuontra.getText() + "'";
                String sqlXoaTheoIDSach = "Delete From muontrasach Where idSach='" + txtidsachqlmuontra.getText() + "'";
                if (rbiddocgiaqlmuontra.isSelected() && !txtiddocgiaqlmuontra.getText().equals("")) {
                    stmt.executeUpdate(sqlXoaTheoIDDG);
                } else if (rbiddocgiaqlmuontra.isSelected() && txtiddocgiaqlmuontra.getText().equals("")) {
                    JOptionPane.showMessageDialog(rootPane, "Không được để trống trường id độc giả");
                } else if (rbidsachqlmuontra.isSelected() && !txtidsachqlmuontra.getText().equals("")) {
                    stmt.executeUpdate(sqlXoaTheoIDSach);
                } else if (rbidsachqlmuontra.isSelected() && txtidsachqlmuontra.getText().equals("")) {
                    JOptionPane.showMessageDialog(rootPane, "Không được để trống trường id sách");
                }
                int soHang = dtmmts.getRowCount() - 1;
                for (int i = soHang; i >= 0; i--) {
                    dtmmts.removeRow(i);
                }
                String sqlHienThiAll = "Select * From muontrasach";
                ResultSet rs = stmt.executeQuery(sqlHienThiAll);
                while (rs.next()) {
                    String[] columns = new String[7];
                    columns[0] = rs.getString(1);
                    columns[1] = rs.getString(2);
                    columns[2] = rs.getString(3);
                    columns[3] = rs.getString(4);
                    columns[4] = rs.getString(5);
                    columns[5] = rs.getString(6);
                    columns[6] = rs.getString(7);
                    dtmmts.addRow(columns);
                }
                rs.close();
                stmt.close();
                conn.close();
            } catch (SQLException se) {
                se.printStackTrace();
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                try {
                    if (stmt != null) {
                        stmt.close();
                    }
                } catch (SQLException se1) {
                    se1.printStackTrace();
                }
                try {
                    if (conn != null) {
                        conn.close();
                    }
                } catch (SQLException se2) {
                    se2.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_btnxoaqlmuontraActionPerformed

    private void btnhuyqlmuontraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhuyqlmuontraActionPerformed
        txtiddocgiaqlmuontra.setText("");
        txthotenqlmuontra.setText("");
        txtidsachqlmuontra.setText("");
        txttensachqlmuontra.setText("");
        txtngaymuon.setText("");
        txtngayhentra.setText("");
        txtngaythuctra.setText("");
    }//GEN-LAST:event_btnhuyqlmuontraActionPerformed

    private void btnthoatqlmuontraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnthoatqlmuontraActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnthoatqlmuontraActionPerformed

    private void btntimkiemqlmuontraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btntimkiemqlmuontraActionPerformed
        Connection conn = null;
        Statement stmt = null;

        if (!rbiddocgiaqlmuontra.isSelected() && !rbidsachqlmuontra.isSelected()) {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn RadioButton để tìm kiếm!");
        } else {
            try {
                Class.forName(JDBC_DRIVER);
                conn = DriverManager.getConnection(DB_URL, USER, PASS);
                stmt = conn.createStatement();
                if (rbiddocgiaqlmuontra.isSelected() && !txtiddocgiaqlmuontra.getText().equals("")) {
                    String sqlTimKiemTheoIDDG = "Select * From muontrasach Where idDocGia='" + txtiddocgiaqlmuontra.getText() + "'";
                    ResultSet rs = stmt.executeQuery(sqlTimKiemTheoIDDG);
                    int soHang = dtmmts.getRowCount() - 1;
                    for (int i = soHang; i >= 0; i--) {
                        dtmmts.removeRow(i);
                    }
                    while (rs.next()) {
                        String[] columns = new String[7];
                        columns[0] = rs.getString(1);
                        columns[1] = rs.getString(2);
                        columns[2] = rs.getString(3);
                        columns[3] = rs.getString(4);
                        columns[4] = rs.getString(5);
                        columns[5] = rs.getString(6);
                        columns[6] = rs.getString(7);
                        dtmmts.addRow(columns);
                    }
                    if(dtmmts.getRowCount() == 0){
                        JOptionPane.showMessageDialog(rootPane, "Không  có thông tin mà bạn cần tìm!");
                    }
                    rs.close();
                } else if (rbiddocgiaqlmuontra.isSelected() && txtiddocgiaqlmuontra.getText().equals("")) {
                    JOptionPane.showMessageDialog(rootPane, "Không được để trống trường id độc giả!");
                } else if (rbidsachqlmuontra.isSelected() && !txtidsachqlmuontra.getText().equals("")) {
                    String sqlTimKiemTheoIDSach = "Select * From muontrasach Where idSach='" + txtidsachqlmuontra.getText() + "'";
                    ResultSet rs = stmt.executeQuery(sqlTimKiemTheoIDSach);
                    int soHang = dtmmts.getRowCount() - 1;
                    for (int i = soHang; i >= 0; i--) {
                        dtmmts.removeRow(i);
                    }
                    while (rs.next()) {
                        String[] columns = new String[7];
                        columns[0] = rs.getString(1);
                        columns[1] = rs.getString(2);
                        columns[2] = rs.getString(3);
                        columns[3] = rs.getString(4);
                        columns[4] = rs.getString(5);
                        columns[5] = rs.getString(6);
                        columns[6] = rs.getString(7);
                        dtmmts.addRow(columns);
                    }
                    rs.close();
                    if(dtmmts.getRowCount() == 0){
                        JOptionPane.showMessageDialog(rootPane, "Không  có thông tin mà bạn cần tìm!");
                    }
                } else if (rbidsachqlmuontra.isSelected() && txtidsachqlmuontra.getText().equals("")) {
                    JOptionPane.showMessageDialog(rootPane, "Không được để trống trường id sách!");
                }
                stmt.close();
                conn.close();
            } catch (SQLException se) {
                se.printStackTrace();
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                try {
                    if (stmt != null) {
                        stmt.close();
                    }
                } catch (SQLException se1) {
                    se1.printStackTrace();
                }
                try {
                    if (conn != null) {
                        conn.close();
                    }
                } catch (SQLException se2) {
                    se2.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_btntimkiemqlmuontraActionPerformed

//=================================QUẢN LÝ THẺ THƯ VIỆN=================================================
    static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";
    static final String DB_URL = "jdbc:mysql://localhost:3306/QuanLySach";
    static final String USER = "root";
    static final String PASS = "123456";

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GiaoDienChinh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GiaoDienChinh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GiaoDienChinh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GiaoDienChinh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GiaoDienChinh().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnhienthibangsach;
    private javax.swing.JButton btnhienthidocgia;
    private javax.swing.JButton btnhienthiqlmuontra;
    private javax.swing.JButton btnhienthithe;
    private javax.swing.JButton btnhuydocgia;
    private javax.swing.JButton btnhuyqlmuontra;
    private javax.swing.JButton btnhuysach;
    private javax.swing.JButton btnhuythe;
    private javax.swing.JButton btnsuadocgia;
    private javax.swing.JButton btnsuaqlmuontra;
    private javax.swing.JButton btnsuasach;
    private javax.swing.JButton btnsuathe;
    private javax.swing.JButton btnthemdocgia;
    private javax.swing.JButton btnthemqlmuontra;
    private javax.swing.JButton btnthemsach;
    private javax.swing.JButton btnthemthe;
    private javax.swing.JButton btnthoatdocgia;
    private javax.swing.JButton btnthoatqlmuontra;
    private javax.swing.JButton btnthoatsach;
    private javax.swing.JButton btnthoatthe;
    private javax.swing.JButton btntimkiemdocgia;
    private javax.swing.JButton btntimkiemqlmuontra;
    private javax.swing.JButton btntimkiemsach;
    private javax.swing.JButton btntimkiemthe;
    private javax.swing.JButton btnxoadocgia;
    private javax.swing.JButton btnxoaqlmuontra;
    private javax.swing.JButton btnxoasach;
    private javax.swing.JButton btnxoathe;
    private javax.swing.ButtonGroup buttonGroupQLDocGia;
    private javax.swing.ButtonGroup buttonGroupQLMuonTraSach;
    private javax.swing.ButtonGroup buttonGroupQLSach;
    private javax.swing.ButtonGroup buttonGroupQLThe;
    private javax.swing.JButton jButton17;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField29;
    private javax.swing.JRadioButton rbgia;
    private javax.swing.JRadioButton rbhoten;
    private javax.swing.JRadioButton rbhotenthe;
    private javax.swing.JRadioButton rbiddocgia;
    private javax.swing.JRadioButton rbiddocgiaqlmuontra;
    private javax.swing.JRadioButton rbidsach;
    private javax.swing.JRadioButton rbidsachqlmuontra;
    private javax.swing.JRadioButton rbidthe;
    private javax.swing.JRadioButton rbsdt;
    private javax.swing.JRadioButton rbtacgia;
    private javax.swing.JRadioButton rbtensach;
    private javax.swing.JRadioButton rbtheloai;
    private javax.swing.JRadioButton rbvitri;
    private javax.swing.JTable tbdocgia;
    private javax.swing.JTable tbmuontra;
    private javax.swing.JTable tbsach;
    private javax.swing.JTable tbthe;
    private javax.swing.JTextField txtdiachi;
    private javax.swing.JTextField txtgiasach;
    private javax.swing.JTextField txthoten;
    private javax.swing.JTextField txthotenqlmuontra;
    private javax.swing.JTextField txthotenthe;
    private javax.swing.JTextField txtiddocgia;
    private javax.swing.JTextField txtiddocgiaqlmuontra;
    private javax.swing.JTextField txtidsach;
    private javax.swing.JTextField txtidsachqlmuontra;
    private javax.swing.JTextField txtidthe;
    private javax.swing.JTextField txtngayhentra;
    private javax.swing.JTextField txtngaymuon;
    private javax.swing.JTextField txtngaysinh;
    private javax.swing.JTextField txtngaythuctra;
    private javax.swing.JTextField txtnghenghiep;
    private javax.swing.JTextField txtnxb;
    private javax.swing.JTextField txtsdt;
    private javax.swing.JTextField txtsoluong;
    private javax.swing.JTextField txttacgia;
    private javax.swing.JTextField txttensach;
    private javax.swing.JTextField txttensachqlmuontra;
    private javax.swing.JTextField txttheloai;
    private javax.swing.JTextField txtvitri;
    // End of variables declaration//GEN-END:variables
}
